// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UAV_Message.proto

#include "UAV_Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Vmsg {
class UAVmsg_velocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UAVmsg_velocity> _instance;
} _UAVmsg_velocity_default_instance_;
class UAVmsg_accelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UAVmsg_acceleration> _instance;
} _UAVmsg_acceleration_default_instance_;
class UAVmsg_angleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UAVmsg_angle> _instance;
} _UAVmsg_angle_default_instance_;
class UAVmsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UAVmsg> _instance;
} _UAVmsg_default_instance_;
}  // namespace Vmsg
static void InitDefaultsscc_info_UAVmsg_UAV_5fMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Vmsg::_UAVmsg_default_instance_;
    new (ptr) ::Vmsg::UAVmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vmsg::UAVmsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UAVmsg_UAV_5fMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UAVmsg_UAV_5fMessage_2eproto}, {}};

static void InitDefaultsscc_info_UAVmsg_acceleration_UAV_5fMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Vmsg::_UAVmsg_acceleration_default_instance_;
    new (ptr) ::Vmsg::UAVmsg_acceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vmsg::UAVmsg_acceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UAVmsg_acceleration_UAV_5fMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UAVmsg_acceleration_UAV_5fMessage_2eproto}, {}};

static void InitDefaultsscc_info_UAVmsg_angle_UAV_5fMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Vmsg::_UAVmsg_angle_default_instance_;
    new (ptr) ::Vmsg::UAVmsg_angle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vmsg::UAVmsg_angle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UAVmsg_angle_UAV_5fMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UAVmsg_angle_UAV_5fMessage_2eproto}, {}};

static void InitDefaultsscc_info_UAVmsg_velocity_UAV_5fMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Vmsg::_UAVmsg_velocity_default_instance_;
    new (ptr) ::Vmsg::UAVmsg_velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vmsg::UAVmsg_velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UAVmsg_velocity_UAV_5fMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UAVmsg_velocity_UAV_5fMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UAV_5fMessage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_UAV_5fMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_UAV_5fMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UAV_5fMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_velocity, velocity_x_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_velocity, velocity_y_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_velocity, velocity_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_acceleration, acc_pitch_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_acceleration, acc_roll_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_acceleration, acc_thrust_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_angle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_angle, ang_pitch_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_angle, ang_roll_),
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg_angle, ang_thrust_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vmsg::UAVmsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vmsg::UAVmsg_velocity)},
  { 8, -1, sizeof(::Vmsg::UAVmsg_acceleration)},
  { 16, -1, sizeof(::Vmsg::UAVmsg_angle)},
  { 24, -1, sizeof(::Vmsg::UAVmsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Vmsg::_UAVmsg_velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Vmsg::_UAVmsg_acceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Vmsg::_UAVmsg_angle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Vmsg::_UAVmsg_default_instance_),
};

const char descriptor_table_protodef_UAV_5fMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021UAV_Message.proto\022\004Vmsg\"\333\001\n\006UAVmsg\032F\n\010"
  "velocity\022\022\n\nvelocity_x\030\001 \001(\002\022\022\n\nvelocity"
  "_y\030\002 \001(\002\022\022\n\nvelocity_z\030\003 \001(\002\032G\n\014accelera"
  "tion\022\021\n\tacc_pitch\030\001 \001(\002\022\020\n\010acc_roll\030\002 \001("
  "\002\022\022\n\nacc_thrust\030\003 \001(\002\032@\n\005angle\022\021\n\tang_pi"
  "tch\030\001 \001(\002\022\020\n\010ang_roll\030\002 \001(\002\022\022\n\nang_thrus"
  "t\030\003 \001(\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_UAV_5fMessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_UAV_5fMessage_2eproto_sccs[4] = {
  &scc_info_UAVmsg_UAV_5fMessage_2eproto.base,
  &scc_info_UAVmsg_acceleration_UAV_5fMessage_2eproto.base,
  &scc_info_UAVmsg_angle_UAV_5fMessage_2eproto.base,
  &scc_info_UAVmsg_velocity_UAV_5fMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UAV_5fMessage_2eproto_once;
static bool descriptor_table_UAV_5fMessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UAV_5fMessage_2eproto = {
  &descriptor_table_UAV_5fMessage_2eproto_initialized, descriptor_table_protodef_UAV_5fMessage_2eproto, "UAV_Message.proto", 255,
  &descriptor_table_UAV_5fMessage_2eproto_once, descriptor_table_UAV_5fMessage_2eproto_sccs, descriptor_table_UAV_5fMessage_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_UAV_5fMessage_2eproto::offsets,
  file_level_metadata_UAV_5fMessage_2eproto, 4, file_level_enum_descriptors_UAV_5fMessage_2eproto, file_level_service_descriptors_UAV_5fMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_UAV_5fMessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_UAV_5fMessage_2eproto), true);
namespace Vmsg {

// ===================================================================

void UAVmsg_velocity::InitAsDefaultInstance() {
}
class UAVmsg_velocity::_Internal {
 public:
};

UAVmsg_velocity::UAVmsg_velocity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vmsg.UAVmsg.velocity)
}
UAVmsg_velocity::UAVmsg_velocity(const UAVmsg_velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velocity_x_, &from.velocity_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_z_) -
    reinterpret_cast<char*>(&velocity_x_)) + sizeof(velocity_z_));
  // @@protoc_insertion_point(copy_constructor:Vmsg.UAVmsg.velocity)
}

void UAVmsg_velocity::SharedCtor() {
  ::memset(&velocity_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_z_) -
      reinterpret_cast<char*>(&velocity_x_)) + sizeof(velocity_z_));
}

UAVmsg_velocity::~UAVmsg_velocity() {
  // @@protoc_insertion_point(destructor:Vmsg.UAVmsg.velocity)
  SharedDtor();
}

void UAVmsg_velocity::SharedDtor() {
}

void UAVmsg_velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UAVmsg_velocity& UAVmsg_velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UAVmsg_velocity_UAV_5fMessage_2eproto.base);
  return *internal_default_instance();
}


void UAVmsg_velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:Vmsg.UAVmsg.velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_z_) -
      reinterpret_cast<char*>(&velocity_x_)) + sizeof(velocity_z_));
  _internal_metadata_.Clear();
}

const char* UAVmsg_velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float velocity_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UAVmsg_velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vmsg.UAVmsg.velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float velocity_x = 1;
  if (!(this->velocity_x() <= 0 && this->velocity_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_velocity_x(), target);
  }

  // float velocity_y = 2;
  if (!(this->velocity_y() <= 0 && this->velocity_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_y(), target);
  }

  // float velocity_z = 3;
  if (!(this->velocity_z() <= 0 && this->velocity_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vmsg.UAVmsg.velocity)
  return target;
}

size_t UAVmsg_velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vmsg.UAVmsg.velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float velocity_x = 1;
  if (!(this->velocity_x() <= 0 && this->velocity_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_y = 2;
  if (!(this->velocity_y() <= 0 && this->velocity_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_z = 3;
  if (!(this->velocity_z() <= 0 && this->velocity_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UAVmsg_velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vmsg.UAVmsg.velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const UAVmsg_velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UAVmsg_velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vmsg.UAVmsg.velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vmsg.UAVmsg.velocity)
    MergeFrom(*source);
  }
}

void UAVmsg_velocity::MergeFrom(const UAVmsg_velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vmsg.UAVmsg.velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity_x() <= 0 && from.velocity_x() >= 0)) {
    _internal_set_velocity_x(from._internal_velocity_x());
  }
  if (!(from.velocity_y() <= 0 && from.velocity_y() >= 0)) {
    _internal_set_velocity_y(from._internal_velocity_y());
  }
  if (!(from.velocity_z() <= 0 && from.velocity_z() >= 0)) {
    _internal_set_velocity_z(from._internal_velocity_z());
  }
}

void UAVmsg_velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vmsg.UAVmsg.velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UAVmsg_velocity::CopyFrom(const UAVmsg_velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vmsg.UAVmsg.velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVmsg_velocity::IsInitialized() const {
  return true;
}

void UAVmsg_velocity::InternalSwap(UAVmsg_velocity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_y_, other->velocity_y_);
  swap(velocity_z_, other->velocity_z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVmsg_velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UAVmsg_acceleration::InitAsDefaultInstance() {
}
class UAVmsg_acceleration::_Internal {
 public:
};

UAVmsg_acceleration::UAVmsg_acceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vmsg.UAVmsg.acceleration)
}
UAVmsg_acceleration::UAVmsg_acceleration(const UAVmsg_acceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_pitch_, &from.acc_pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_thrust_) -
    reinterpret_cast<char*>(&acc_pitch_)) + sizeof(acc_thrust_));
  // @@protoc_insertion_point(copy_constructor:Vmsg.UAVmsg.acceleration)
}

void UAVmsg_acceleration::SharedCtor() {
  ::memset(&acc_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_thrust_) -
      reinterpret_cast<char*>(&acc_pitch_)) + sizeof(acc_thrust_));
}

UAVmsg_acceleration::~UAVmsg_acceleration() {
  // @@protoc_insertion_point(destructor:Vmsg.UAVmsg.acceleration)
  SharedDtor();
}

void UAVmsg_acceleration::SharedDtor() {
}

void UAVmsg_acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UAVmsg_acceleration& UAVmsg_acceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UAVmsg_acceleration_UAV_5fMessage_2eproto.base);
  return *internal_default_instance();
}


void UAVmsg_acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:Vmsg.UAVmsg.acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_thrust_) -
      reinterpret_cast<char*>(&acc_pitch_)) + sizeof(acc_thrust_));
  _internal_metadata_.Clear();
}

const char* UAVmsg_acceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float acc_pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          acc_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          acc_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_thrust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          acc_thrust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UAVmsg_acceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vmsg.UAVmsg.acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc_pitch = 1;
  if (!(this->acc_pitch() <= 0 && this->acc_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_acc_pitch(), target);
  }

  // float acc_roll = 2;
  if (!(this->acc_roll() <= 0 && this->acc_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc_roll(), target);
  }

  // float acc_thrust = 3;
  if (!(this->acc_thrust() <= 0 && this->acc_thrust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_acc_thrust(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vmsg.UAVmsg.acceleration)
  return target;
}

size_t UAVmsg_acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vmsg.UAVmsg.acceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acc_pitch = 1;
  if (!(this->acc_pitch() <= 0 && this->acc_pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_roll = 2;
  if (!(this->acc_roll() <= 0 && this->acc_roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_thrust = 3;
  if (!(this->acc_thrust() <= 0 && this->acc_thrust() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UAVmsg_acceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vmsg.UAVmsg.acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const UAVmsg_acceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UAVmsg_acceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vmsg.UAVmsg.acceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vmsg.UAVmsg.acceleration)
    MergeFrom(*source);
  }
}

void UAVmsg_acceleration::MergeFrom(const UAVmsg_acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vmsg.UAVmsg.acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acc_pitch() <= 0 && from.acc_pitch() >= 0)) {
    _internal_set_acc_pitch(from._internal_acc_pitch());
  }
  if (!(from.acc_roll() <= 0 && from.acc_roll() >= 0)) {
    _internal_set_acc_roll(from._internal_acc_roll());
  }
  if (!(from.acc_thrust() <= 0 && from.acc_thrust() >= 0)) {
    _internal_set_acc_thrust(from._internal_acc_thrust());
  }
}

void UAVmsg_acceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vmsg.UAVmsg.acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UAVmsg_acceleration::CopyFrom(const UAVmsg_acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vmsg.UAVmsg.acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVmsg_acceleration::IsInitialized() const {
  return true;
}

void UAVmsg_acceleration::InternalSwap(UAVmsg_acceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc_pitch_, other->acc_pitch_);
  swap(acc_roll_, other->acc_roll_);
  swap(acc_thrust_, other->acc_thrust_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVmsg_acceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UAVmsg_angle::InitAsDefaultInstance() {
}
class UAVmsg_angle::_Internal {
 public:
};

UAVmsg_angle::UAVmsg_angle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vmsg.UAVmsg.angle)
}
UAVmsg_angle::UAVmsg_angle(const UAVmsg_angle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ang_pitch_, &from.ang_pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_thrust_) -
    reinterpret_cast<char*>(&ang_pitch_)) + sizeof(ang_thrust_));
  // @@protoc_insertion_point(copy_constructor:Vmsg.UAVmsg.angle)
}

void UAVmsg_angle::SharedCtor() {
  ::memset(&ang_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_thrust_) -
      reinterpret_cast<char*>(&ang_pitch_)) + sizeof(ang_thrust_));
}

UAVmsg_angle::~UAVmsg_angle() {
  // @@protoc_insertion_point(destructor:Vmsg.UAVmsg.angle)
  SharedDtor();
}

void UAVmsg_angle::SharedDtor() {
}

void UAVmsg_angle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UAVmsg_angle& UAVmsg_angle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UAVmsg_angle_UAV_5fMessage_2eproto.base);
  return *internal_default_instance();
}


void UAVmsg_angle::Clear() {
// @@protoc_insertion_point(message_clear_start:Vmsg.UAVmsg.angle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ang_pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_thrust_) -
      reinterpret_cast<char*>(&ang_pitch_)) + sizeof(ang_thrust_));
  _internal_metadata_.Clear();
}

const char* UAVmsg_angle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ang_pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ang_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ang_roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ang_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ang_thrust = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ang_thrust_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UAVmsg_angle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vmsg.UAVmsg.angle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ang_pitch = 1;
  if (!(this->ang_pitch() <= 0 && this->ang_pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ang_pitch(), target);
  }

  // float ang_roll = 2;
  if (!(this->ang_roll() <= 0 && this->ang_roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ang_roll(), target);
  }

  // float ang_thrust = 3;
  if (!(this->ang_thrust() <= 0 && this->ang_thrust() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ang_thrust(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vmsg.UAVmsg.angle)
  return target;
}

size_t UAVmsg_angle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vmsg.UAVmsg.angle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ang_pitch = 1;
  if (!(this->ang_pitch() <= 0 && this->ang_pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float ang_roll = 2;
  if (!(this->ang_roll() <= 0 && this->ang_roll() >= 0)) {
    total_size += 1 + 4;
  }

  // float ang_thrust = 3;
  if (!(this->ang_thrust() <= 0 && this->ang_thrust() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UAVmsg_angle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vmsg.UAVmsg.angle)
  GOOGLE_DCHECK_NE(&from, this);
  const UAVmsg_angle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UAVmsg_angle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vmsg.UAVmsg.angle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vmsg.UAVmsg.angle)
    MergeFrom(*source);
  }
}

void UAVmsg_angle::MergeFrom(const UAVmsg_angle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vmsg.UAVmsg.angle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ang_pitch() <= 0 && from.ang_pitch() >= 0)) {
    _internal_set_ang_pitch(from._internal_ang_pitch());
  }
  if (!(from.ang_roll() <= 0 && from.ang_roll() >= 0)) {
    _internal_set_ang_roll(from._internal_ang_roll());
  }
  if (!(from.ang_thrust() <= 0 && from.ang_thrust() >= 0)) {
    _internal_set_ang_thrust(from._internal_ang_thrust());
  }
}

void UAVmsg_angle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vmsg.UAVmsg.angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UAVmsg_angle::CopyFrom(const UAVmsg_angle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vmsg.UAVmsg.angle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVmsg_angle::IsInitialized() const {
  return true;
}

void UAVmsg_angle::InternalSwap(UAVmsg_angle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ang_pitch_, other->ang_pitch_);
  swap(ang_roll_, other->ang_roll_);
  swap(ang_thrust_, other->ang_thrust_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVmsg_angle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UAVmsg::InitAsDefaultInstance() {
}
class UAVmsg::_Internal {
 public:
};

UAVmsg::UAVmsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vmsg.UAVmsg)
}
UAVmsg::UAVmsg(const UAVmsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Vmsg.UAVmsg)
}

void UAVmsg::SharedCtor() {
}

UAVmsg::~UAVmsg() {
  // @@protoc_insertion_point(destructor:Vmsg.UAVmsg)
  SharedDtor();
}

void UAVmsg::SharedDtor() {
}

void UAVmsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UAVmsg& UAVmsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UAVmsg_UAV_5fMessage_2eproto.base);
  return *internal_default_instance();
}


void UAVmsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Vmsg.UAVmsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* UAVmsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UAVmsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vmsg.UAVmsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vmsg.UAVmsg)
  return target;
}

size_t UAVmsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vmsg.UAVmsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UAVmsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vmsg.UAVmsg)
  GOOGLE_DCHECK_NE(&from, this);
  const UAVmsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UAVmsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vmsg.UAVmsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vmsg.UAVmsg)
    MergeFrom(*source);
  }
}

void UAVmsg::MergeFrom(const UAVmsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vmsg.UAVmsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UAVmsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vmsg.UAVmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UAVmsg::CopyFrom(const UAVmsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vmsg.UAVmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAVmsg::IsInitialized() const {
  return true;
}

void UAVmsg::InternalSwap(UAVmsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAVmsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Vmsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vmsg::UAVmsg_velocity* Arena::CreateMaybeMessage< ::Vmsg::UAVmsg_velocity >(Arena* arena) {
  return Arena::CreateInternal< ::Vmsg::UAVmsg_velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::Vmsg::UAVmsg_acceleration* Arena::CreateMaybeMessage< ::Vmsg::UAVmsg_acceleration >(Arena* arena) {
  return Arena::CreateInternal< ::Vmsg::UAVmsg_acceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::Vmsg::UAVmsg_angle* Arena::CreateMaybeMessage< ::Vmsg::UAVmsg_angle >(Arena* arena) {
  return Arena::CreateInternal< ::Vmsg::UAVmsg_angle >(arena);
}
template<> PROTOBUF_NOINLINE ::Vmsg::UAVmsg* Arena::CreateMaybeMessage< ::Vmsg::UAVmsg >(Arena* arena) {
  return Arena::CreateInternal< ::Vmsg::UAVmsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
