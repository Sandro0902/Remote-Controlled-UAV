// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UAV_Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UAV_5fMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UAV_5fMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UAV_5fMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UAV_5fMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UAV_5fMessage_2eproto;
namespace Vmsg {
class UAVmsg;
class UAVmsgDefaultTypeInternal;
extern UAVmsgDefaultTypeInternal _UAVmsg_default_instance_;
class UAVmsg_acceleration;
class UAVmsg_accelerationDefaultTypeInternal;
extern UAVmsg_accelerationDefaultTypeInternal _UAVmsg_acceleration_default_instance_;
class UAVmsg_angle;
class UAVmsg_angleDefaultTypeInternal;
extern UAVmsg_angleDefaultTypeInternal _UAVmsg_angle_default_instance_;
class UAVmsg_velocity;
class UAVmsg_velocityDefaultTypeInternal;
extern UAVmsg_velocityDefaultTypeInternal _UAVmsg_velocity_default_instance_;
}  // namespace Vmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::Vmsg::UAVmsg* Arena::CreateMaybeMessage<::Vmsg::UAVmsg>(Arena*);
template<> ::Vmsg::UAVmsg_acceleration* Arena::CreateMaybeMessage<::Vmsg::UAVmsg_acceleration>(Arena*);
template<> ::Vmsg::UAVmsg_angle* Arena::CreateMaybeMessage<::Vmsg::UAVmsg_angle>(Arena*);
template<> ::Vmsg::UAVmsg_velocity* Arena::CreateMaybeMessage<::Vmsg::UAVmsg_velocity>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Vmsg {

// ===================================================================

class UAVmsg_velocity :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vmsg.UAVmsg.velocity) */ {
 public:
  UAVmsg_velocity();
  virtual ~UAVmsg_velocity();

  UAVmsg_velocity(const UAVmsg_velocity& from);
  UAVmsg_velocity(UAVmsg_velocity&& from) noexcept
    : UAVmsg_velocity() {
    *this = ::std::move(from);
  }

  inline UAVmsg_velocity& operator=(const UAVmsg_velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVmsg_velocity& operator=(UAVmsg_velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UAVmsg_velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UAVmsg_velocity* internal_default_instance() {
    return reinterpret_cast<const UAVmsg_velocity*>(
               &_UAVmsg_velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UAVmsg_velocity& a, UAVmsg_velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVmsg_velocity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UAVmsg_velocity* New() const final {
    return CreateMaybeMessage<UAVmsg_velocity>(nullptr);
  }

  UAVmsg_velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UAVmsg_velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UAVmsg_velocity& from);
  void MergeFrom(const UAVmsg_velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVmsg_velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vmsg.UAVmsg.velocity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UAV_5fMessage_2eproto);
    return ::descriptor_table_UAV_5fMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityXFieldNumber = 1,
    kVelocityYFieldNumber = 2,
    kVelocityZFieldNumber = 3,
  };
  // float velocity_x = 1;
  void clear_velocity_x();
  float velocity_x() const;
  void set_velocity_x(float value);
  private:
  float _internal_velocity_x() const;
  void _internal_set_velocity_x(float value);
  public:

  // float velocity_y = 2;
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);
  private:
  float _internal_velocity_y() const;
  void _internal_set_velocity_y(float value);
  public:

  // float velocity_z = 3;
  void clear_velocity_z();
  float velocity_z() const;
  void set_velocity_z(float value);
  private:
  float _internal_velocity_z() const;
  void _internal_set_velocity_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vmsg.UAVmsg.velocity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float velocity_x_;
  float velocity_y_;
  float velocity_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UAV_5fMessage_2eproto;
};
// -------------------------------------------------------------------

class UAVmsg_acceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vmsg.UAVmsg.acceleration) */ {
 public:
  UAVmsg_acceleration();
  virtual ~UAVmsg_acceleration();

  UAVmsg_acceleration(const UAVmsg_acceleration& from);
  UAVmsg_acceleration(UAVmsg_acceleration&& from) noexcept
    : UAVmsg_acceleration() {
    *this = ::std::move(from);
  }

  inline UAVmsg_acceleration& operator=(const UAVmsg_acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVmsg_acceleration& operator=(UAVmsg_acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UAVmsg_acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UAVmsg_acceleration* internal_default_instance() {
    return reinterpret_cast<const UAVmsg_acceleration*>(
               &_UAVmsg_acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UAVmsg_acceleration& a, UAVmsg_acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVmsg_acceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UAVmsg_acceleration* New() const final {
    return CreateMaybeMessage<UAVmsg_acceleration>(nullptr);
  }

  UAVmsg_acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UAVmsg_acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UAVmsg_acceleration& from);
  void MergeFrom(const UAVmsg_acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVmsg_acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vmsg.UAVmsg.acceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UAV_5fMessage_2eproto);
    return ::descriptor_table_UAV_5fMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccPitchFieldNumber = 1,
    kAccRollFieldNumber = 2,
    kAccThrustFieldNumber = 3,
  };
  // float acc_pitch = 1;
  void clear_acc_pitch();
  float acc_pitch() const;
  void set_acc_pitch(float value);
  private:
  float _internal_acc_pitch() const;
  void _internal_set_acc_pitch(float value);
  public:

  // float acc_roll = 2;
  void clear_acc_roll();
  float acc_roll() const;
  void set_acc_roll(float value);
  private:
  float _internal_acc_roll() const;
  void _internal_set_acc_roll(float value);
  public:

  // float acc_thrust = 3;
  void clear_acc_thrust();
  float acc_thrust() const;
  void set_acc_thrust(float value);
  private:
  float _internal_acc_thrust() const;
  void _internal_set_acc_thrust(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vmsg.UAVmsg.acceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float acc_pitch_;
  float acc_roll_;
  float acc_thrust_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UAV_5fMessage_2eproto;
};
// -------------------------------------------------------------------

class UAVmsg_angle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vmsg.UAVmsg.angle) */ {
 public:
  UAVmsg_angle();
  virtual ~UAVmsg_angle();

  UAVmsg_angle(const UAVmsg_angle& from);
  UAVmsg_angle(UAVmsg_angle&& from) noexcept
    : UAVmsg_angle() {
    *this = ::std::move(from);
  }

  inline UAVmsg_angle& operator=(const UAVmsg_angle& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVmsg_angle& operator=(UAVmsg_angle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UAVmsg_angle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UAVmsg_angle* internal_default_instance() {
    return reinterpret_cast<const UAVmsg_angle*>(
               &_UAVmsg_angle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UAVmsg_angle& a, UAVmsg_angle& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVmsg_angle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UAVmsg_angle* New() const final {
    return CreateMaybeMessage<UAVmsg_angle>(nullptr);
  }

  UAVmsg_angle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UAVmsg_angle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UAVmsg_angle& from);
  void MergeFrom(const UAVmsg_angle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVmsg_angle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vmsg.UAVmsg.angle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UAV_5fMessage_2eproto);
    return ::descriptor_table_UAV_5fMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngPitchFieldNumber = 1,
    kAngRollFieldNumber = 2,
    kAngThrustFieldNumber = 3,
  };
  // float ang_pitch = 1;
  void clear_ang_pitch();
  float ang_pitch() const;
  void set_ang_pitch(float value);
  private:
  float _internal_ang_pitch() const;
  void _internal_set_ang_pitch(float value);
  public:

  // float ang_roll = 2;
  void clear_ang_roll();
  float ang_roll() const;
  void set_ang_roll(float value);
  private:
  float _internal_ang_roll() const;
  void _internal_set_ang_roll(float value);
  public:

  // float ang_thrust = 3;
  void clear_ang_thrust();
  float ang_thrust() const;
  void set_ang_thrust(float value);
  private:
  float _internal_ang_thrust() const;
  void _internal_set_ang_thrust(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vmsg.UAVmsg.angle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ang_pitch_;
  float ang_roll_;
  float ang_thrust_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UAV_5fMessage_2eproto;
};
// -------------------------------------------------------------------

class UAVmsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vmsg.UAVmsg) */ {
 public:
  UAVmsg();
  virtual ~UAVmsg();

  UAVmsg(const UAVmsg& from);
  UAVmsg(UAVmsg&& from) noexcept
    : UAVmsg() {
    *this = ::std::move(from);
  }

  inline UAVmsg& operator=(const UAVmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAVmsg& operator=(UAVmsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UAVmsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UAVmsg* internal_default_instance() {
    return reinterpret_cast<const UAVmsg*>(
               &_UAVmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UAVmsg& a, UAVmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(UAVmsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UAVmsg* New() const final {
    return CreateMaybeMessage<UAVmsg>(nullptr);
  }

  UAVmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UAVmsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UAVmsg& from);
  void MergeFrom(const UAVmsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAVmsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vmsg.UAVmsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UAV_5fMessage_2eproto);
    return ::descriptor_table_UAV_5fMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UAVmsg_velocity velocity;
  typedef UAVmsg_acceleration acceleration;
  typedef UAVmsg_angle angle;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Vmsg.UAVmsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UAV_5fMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UAVmsg_velocity

// float velocity_x = 1;
inline void UAVmsg_velocity::clear_velocity_x() {
  velocity_x_ = 0;
}
inline float UAVmsg_velocity::_internal_velocity_x() const {
  return velocity_x_;
}
inline float UAVmsg_velocity::velocity_x() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.velocity.velocity_x)
  return _internal_velocity_x();
}
inline void UAVmsg_velocity::_internal_set_velocity_x(float value) {
  
  velocity_x_ = value;
}
inline void UAVmsg_velocity::set_velocity_x(float value) {
  _internal_set_velocity_x(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.velocity.velocity_x)
}

// float velocity_y = 2;
inline void UAVmsg_velocity::clear_velocity_y() {
  velocity_y_ = 0;
}
inline float UAVmsg_velocity::_internal_velocity_y() const {
  return velocity_y_;
}
inline float UAVmsg_velocity::velocity_y() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.velocity.velocity_y)
  return _internal_velocity_y();
}
inline void UAVmsg_velocity::_internal_set_velocity_y(float value) {
  
  velocity_y_ = value;
}
inline void UAVmsg_velocity::set_velocity_y(float value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.velocity.velocity_y)
}

// float velocity_z = 3;
inline void UAVmsg_velocity::clear_velocity_z() {
  velocity_z_ = 0;
}
inline float UAVmsg_velocity::_internal_velocity_z() const {
  return velocity_z_;
}
inline float UAVmsg_velocity::velocity_z() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.velocity.velocity_z)
  return _internal_velocity_z();
}
inline void UAVmsg_velocity::_internal_set_velocity_z(float value) {
  
  velocity_z_ = value;
}
inline void UAVmsg_velocity::set_velocity_z(float value) {
  _internal_set_velocity_z(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.velocity.velocity_z)
}

// -------------------------------------------------------------------

// UAVmsg_acceleration

// float acc_pitch = 1;
inline void UAVmsg_acceleration::clear_acc_pitch() {
  acc_pitch_ = 0;
}
inline float UAVmsg_acceleration::_internal_acc_pitch() const {
  return acc_pitch_;
}
inline float UAVmsg_acceleration::acc_pitch() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.acceleration.acc_pitch)
  return _internal_acc_pitch();
}
inline void UAVmsg_acceleration::_internal_set_acc_pitch(float value) {
  
  acc_pitch_ = value;
}
inline void UAVmsg_acceleration::set_acc_pitch(float value) {
  _internal_set_acc_pitch(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.acceleration.acc_pitch)
}

// float acc_roll = 2;
inline void UAVmsg_acceleration::clear_acc_roll() {
  acc_roll_ = 0;
}
inline float UAVmsg_acceleration::_internal_acc_roll() const {
  return acc_roll_;
}
inline float UAVmsg_acceleration::acc_roll() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.acceleration.acc_roll)
  return _internal_acc_roll();
}
inline void UAVmsg_acceleration::_internal_set_acc_roll(float value) {
  
  acc_roll_ = value;
}
inline void UAVmsg_acceleration::set_acc_roll(float value) {
  _internal_set_acc_roll(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.acceleration.acc_roll)
}

// float acc_thrust = 3;
inline void UAVmsg_acceleration::clear_acc_thrust() {
  acc_thrust_ = 0;
}
inline float UAVmsg_acceleration::_internal_acc_thrust() const {
  return acc_thrust_;
}
inline float UAVmsg_acceleration::acc_thrust() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.acceleration.acc_thrust)
  return _internal_acc_thrust();
}
inline void UAVmsg_acceleration::_internal_set_acc_thrust(float value) {
  
  acc_thrust_ = value;
}
inline void UAVmsg_acceleration::set_acc_thrust(float value) {
  _internal_set_acc_thrust(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.acceleration.acc_thrust)
}

// -------------------------------------------------------------------

// UAVmsg_angle

// float ang_pitch = 1;
inline void UAVmsg_angle::clear_ang_pitch() {
  ang_pitch_ = 0;
}
inline float UAVmsg_angle::_internal_ang_pitch() const {
  return ang_pitch_;
}
inline float UAVmsg_angle::ang_pitch() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.angle.ang_pitch)
  return _internal_ang_pitch();
}
inline void UAVmsg_angle::_internal_set_ang_pitch(float value) {
  
  ang_pitch_ = value;
}
inline void UAVmsg_angle::set_ang_pitch(float value) {
  _internal_set_ang_pitch(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.angle.ang_pitch)
}

// float ang_roll = 2;
inline void UAVmsg_angle::clear_ang_roll() {
  ang_roll_ = 0;
}
inline float UAVmsg_angle::_internal_ang_roll() const {
  return ang_roll_;
}
inline float UAVmsg_angle::ang_roll() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.angle.ang_roll)
  return _internal_ang_roll();
}
inline void UAVmsg_angle::_internal_set_ang_roll(float value) {
  
  ang_roll_ = value;
}
inline void UAVmsg_angle::set_ang_roll(float value) {
  _internal_set_ang_roll(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.angle.ang_roll)
}

// float ang_thrust = 3;
inline void UAVmsg_angle::clear_ang_thrust() {
  ang_thrust_ = 0;
}
inline float UAVmsg_angle::_internal_ang_thrust() const {
  return ang_thrust_;
}
inline float UAVmsg_angle::ang_thrust() const {
  // @@protoc_insertion_point(field_get:Vmsg.UAVmsg.angle.ang_thrust)
  return _internal_ang_thrust();
}
inline void UAVmsg_angle::_internal_set_ang_thrust(float value) {
  
  ang_thrust_ = value;
}
inline void UAVmsg_angle::set_ang_thrust(float value) {
  _internal_set_ang_thrust(value);
  // @@protoc_insertion_point(field_set:Vmsg.UAVmsg.angle.ang_thrust)
}

// -------------------------------------------------------------------

// UAVmsg

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Vmsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UAV_5fMessage_2eproto
